"use client";

import "antd/dist/reset.css";
import "./globals.css";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import StyledComponentsRegistry from "@/providers/AntdRegistry";
import customTheme from "@/theme/themeConfig";

import React, { useState, useEffect } from "react";
import {
  MenuFoldOutlined,
  MenuUnfoldOutlined,
  UploadOutlined,
  VideoCameraOutlined,
  DesktopOutlined,
  FileOutlined,
  PieChartOutlined,
  TeamOutlined,
  UserOutlined,
  DownOutlined
} from "@ant-design/icons";
import {
  Layout,
  Menu,
  Space,
  Button,
  theme,
  ConfigProvider,
  Avatar,
  Dropdown
} from "antd";
import type { MenuProps } from "antd";
import { Footer } from "antd/es/layout/layout";

const { Header, Sider, Content } = Layout;

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
  title: "Weather Forecast App",
  description: "Generated by create next app"
};

type MenuItem = Required<MenuProps>["items"][number];

const RootLayout = ({ children }: { children: React.ReactNode }) => {
  function getItem(
    label: React.ReactNode,
    key: React.Key,
    icon?: React.ReactNode,
    children?: MenuItem[]
  ): MenuItem {
    return {
      key,
      icon,
      children,
      label
    } as MenuItem;
  }

  const items2: MenuProps["items"] = [
    {
      label: (
        <a
          target="_blank"
          rel="noopener noreferrer"
          href="https://www.antgroup.com"
        >
          1st menu item
        </a>
      ),
      key: "0"
    },
    {
      label: (
        <a
          target="_blank"
          rel="noopener noreferrer"
          href="https://www.aliyun.com"
        >
          2nd menu item
        </a>
      ),
      key: "1"
    },
    {
      type: "divider"
    },
    {
      label: "3rd menu item（disabled）",
      key: "3",
      disabled: true
    }
  ];
  const items: MenuItem[] = [
    getItem("Option 1", "1", <PieChartOutlined />),
    getItem("Option 2", "2", <DesktopOutlined />),
    getItem("User", "sub1", <UserOutlined />, [
      getItem("Tom", "3"),
      getItem("Bill", "4"),
      getItem("Alex", "5")
    ]),
    getItem("Team", "sub2", <TeamOutlined />, [
      getItem("Team 1", "6"),
      getItem("Team 2", "8")
    ]),
    getItem("Files", "9", <FileOutlined />)
  ];

  const [windowSize, setWindowSize] = useState<number>(0);
  const [collapsed, setCollapsed] = useState(false);
  const {
    token: { colorBgContainer }
  } = theme.useToken();

  useEffect(() => {
    if (windowSize === 0) {
      setWindowSize(screen.width);
    }

    const handleWindowResize = () => {
      setWindowSize(screen.width);
    };

    window.addEventListener("resize", handleWindowResize);

    return () => {
      window.removeEventListener("resize", handleWindowResize);
    };
  }, []);

  useEffect(() => {
    console.log(windowSize);
    if (windowSize < 768) {
      setCollapsed(true);
    }

    if (windowSize >= 768) {
      setCollapsed(false);
    }
  }, [windowSize]);

  return (
    <html lang="en">
      <body>
        <StyledComponentsRegistry>
          <ConfigProvider theme={customTheme}>
            <Layout className="container">
              <Header
                style={{
                  backgroundColor: "white",
                  padding: ".5rem",
                  borderBottom: "3px solid #EC1C24"
                }}
                className="customHeader"
              >
                <div
                  style={{
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "flex-start"
                  }}
                >
                  <div
                    className={`demoLogoVertical ${
                      !collapsed && "demoLogoVerticalSize"
                    }`}
                  >
                    Title
                  </div>
                  <Button
                    type="text"
                    icon={
                      collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />
                    }
                    onClick={() => setCollapsed(!collapsed)}
                    style={{
                      fontSize: "16px"
                    }}
                  />
                </div>
                <div style={{ display: "flex" }}></div>
                <div
                  style={{
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "flex-start"
                  }}
                >
                  <div style={{ marginRight: ".25rem" }}>
                    <Avatar icon={<UserOutlined />} />
                  </div>
                  <div>
                    <Dropdown menu={{ items }}>
                      <a onClick={(e) => e.preventDefault()}>
                        <Space>
                          John Doe
                          <DownOutlined style={{ fontSize: 12 }} />
                        </Space>
                      </a>
                    </Dropdown>
                  </div>
                </div>
              </Header>
              <Layout>
                <Sider
                  className="headerSm"
                  theme="light"
                  collapsible
                  breakpoint={"sm"}
                  trigger={null}
                  collapsed={collapsed}
                >
                  <Menu
                    theme="light"
                    defaultSelectedKeys={["1"]}
                    mode="inline"
                    items={items}
                  />
                </Sider>
                <Content className="mainContent">{children}</Content>
              </Layout>
              <Footer style={{ backgroundColor: "#344054", height: "5vh" }}>
                test footer
              </Footer>
            </Layout>
          </ConfigProvider>
        </StyledComponentsRegistry>
      </body>
    </html>
  );
};

export default RootLayout;
